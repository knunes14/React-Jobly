{"ast":null,"code":"var _jsxFileName = \"/Users/keegannunes/Documents/react-jobly/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport './App.css';\nimport NavBar from \"./navigation/NavBar\";\nimport JoblyApi from \"./api/api\";\nimport Paths from \"./navigation/Paths\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport { jwtDecode } from \"jwt-decode\";\nimport UserContext from \"./auth/UserContext\";\nimport LoadingPage from \"./common/LoadingPage\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook..\n *\n * App -> Routes\n */\n\nfunction App() {\n  _s();\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token);\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwtDecode(token);\n          // put the token on the API class to be used when you call the API\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          //setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles signup for app.\n   * Automatic login, when signup form is submitted.\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData); // must add this to JoblyApi!!!!\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errs) {\n      console.error(\"signup failed\", errs);\n      return {\n        success: false,\n        errs\n      };\n    }\n  }\n\n  /** Handles login. */\n  async function login(data) {\n    try {\n      let token = await JoblyApi.login(data);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errs) {\n      console.error(\"login failed\", errs);\n      return {\n        success: false,\n        errs\n      };\n    }\n  }\n\n  /** Handles sitewide logout.*/\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** checks to see if a job has been applied to */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** API Call to apply for a job, also updates set of application ids. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(LoadingPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser,\n        hasAppliedToJob,\n        applyToJob\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Paths, {\n          login: login,\n          signup: signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"P9AZpJ2AXWaU4A/NZUcTRHlm9fI=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","NavBar","JoblyApi","Paths","useLocalStorage","jwtDecode","UserContext","LoadingPage","jsxDEV","_jsxDEV","TOKEN_STORAGE_ID","App","_s","token","setToken","currentUser","setCurrentUser","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","console","debug","loadUserInfo","getCurrentUser","username","err","error","signup","signupData","success","errs","login","data","logout","hasAppliedToJob","id","has","applyToJob","fileName","_jsxFileName","lineNumber","columnNumber","children","Provider","value","className","_c","$RefreshReg$"],"sources":["/Users/keegannunes/Documents/react-jobly/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport './App.css';\nimport NavBar from \"./navigation/NavBar\";\nimport JoblyApi from \"./api/api\";\nimport Paths from \"./navigation/Paths\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport { jwtDecode } from \"jwt-decode\";\nimport UserContext from \"./auth/UserContext\";\nimport LoadingPage from \"./common/LoadingPage\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook..\n *\n * App -> Routes\n */\n\nfunction App() {\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token);\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwtDecode(token);\n          // put the token on the API class to be used when you call the API\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username); \n          setCurrentUser(currentUser);\n          //setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n/** Handles signup for app.\n * Automatic login, when signup form is submitted.\n */\nasync function signup(signupData) {\n  try {\n    let token = await JoblyApi.signup(signupData); // must add this to JoblyApi!!!!\n    setToken(token);\n    return { success: true };\n  } catch (errs) {\n    console.error(\"signup failed\", errs);\n    return { success: false, errs };\n  }\n}\n\n/** Handles login. */\nasync function login(data) {\n  try {\n    let token = await JoblyApi.login(data);\n    setToken(token);\n    return { success: true };\n  } catch (errs) {\n    console.error(\"login failed\", errs);\n    return {success: false, errs}\n  }\n}\n\n/** Handles sitewide logout.*/\nfunction logout() {\n  setCurrentUser(null);\n  setToken(null);\n}\n\n/** checks to see if a job has been applied to */\nfunction hasAppliedToJob(id) {\n  return applicationIds.has(id);\n}\n\n/** API Call to apply for a job, also updates set of application ids. */\nfunction applyToJob(id) {\n  if (hasAppliedToJob(id)) return;\n  JoblyApi.applyToJob(currentUser.username, id);\n  setApplicationIds(new Set([...applicationIds, id]));\n}\n\nif (!infoLoaded) return <LoadingPage />\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <NavBar logout={logout}/>\n            <Paths login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}