{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n * \n * Centralizes AJAX calls for React Components.\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  //** Get current user information. */\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Signup for site */\n  static async signup(signupData) {\n    let res = await this.request(`auth/register`, signupData, \"post\");\n    return res.token;\n  }\n\n  /** Login to site */\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Update User Profile. */\n  static async saveProfile(username, profileData) {\n    let res = await this.request(`users/${username}`, profileData, \"patch\");\n    return res.user;\n  }\n\n  /** Get a list of all companies. */\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", {\n      name\n    });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get a list of all jobs. */\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", {\n      title\n    });\n    return res.jobs;\n  }\n\n  /** User apply to a job. */\n  static async applyToJob(username, jobId) {\n    let res = await this.request(`users/${username}/jobs/${jobId}`, {}, \"post\");\n  }\n}\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCurrentUser","username","res","user","signup","signupData","login","saveProfile","profileData","getCompanies","name","companies","getCompany","handle","company","getJobs","title","jobs","applyToJob","jobId"],"sources":["/Users/keegannunes/Documents/react-jobly/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n * \n * Centralizes AJAX calls for React Components.\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  //** Get current user information. */\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Signup for site */\n  static async signup(signupData) {\n    let res = await this.request(`auth/register`, signupData, \"post\");\n    return res.token;\n  }\n\n/** Login to site */ \nstatic async login(data) {\n  let res = await this.request(`auth/token`, data, \"post\");\n  return res.token;\n}\n\n/** Update User Profile. */\nstatic async saveProfile(username, profileData) {\n  let res = await this.request(`users/${username}`, profileData, \"patch\");\n  return res.user;\n}\n\n  /** Get a list of all companies. */\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get a list of all jobs. */\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** User apply to a job. */\n  static async applyToJob(username, jobId) {\n    let res = await this.request(`users/${username}/jobs/${jobId}`, {}, \"post\");\n  }\n}\n    export default JoblyApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}